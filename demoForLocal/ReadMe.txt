项目说明
	python
		在网页版中应用中，只需要调用groupCounter中的函数。
		test.py是一个例子。
		调用顺序：
		1. 申明一个实例。
				counterA = groupCounter.groupCounter()
		2. 读取输入。
				从文件中输入为：counterA.readGjfFile(),输入变量为文件名fileName，文件路径directory，若在与.py相同文件夹下则可缺省，要求解的分子名moleculeLabel，方便用户，可缺省。文件示例见Gjfs中的文件。
				可以是
				-----------------------------------------------------------------
					%nprocshared=12
					%mem=30GB
					# opt freq b3lyp/6-311++g(d,p) geom=connectivity

					Title Card Required

					0 1
					 C                 -2.46019102    0.66878980    0.00000000
					 H                 -3.53019102    0.66878980    0.00000000
					 C                 -1.78491671    1.84376710    0.00000000
					 H                 -2.31808046    2.77147202    0.00000000
					 C                 -0.24491671    1.84376710    0.00000000
					 H                  0.11174964    1.33936561    0.87365225
					 H                  0.11175014    1.33936277   -0.87365040
					 C                  0.26841616    3.29569318   -0.00000272
					 H                 -0.08809134    3.80003760   -0.87375274
					 H                 -0.08841013    3.80015413    0.87354988
					 H                  1.33841614    3.29569319    0.00019285
					 C                 -1.69283385   -0.66641167    0.00000000
					 H                 -1.07632036   -0.72346683    0.87267166
					 H                 -2.38975980   -1.47831708    0.00195600
					 H                 -1.07925784   -0.72515562   -0.87462771

					 1 2 1.0 3 2.0 12 1.0
					 2
					 3 4 1.0 5 1.0
					 4
					 5 6 1.0 7 1.0 8 1.0
					 6
					 7
					 8 9 1.0 10 1.0 11 1.0
					 9
					 10
					 11
					 12 13 1.0 14 1.0 15 1.0
					 13
					 14
					 15
				-----------------------------------------------------------------
				
				也可以是
				-----------------------------------------------------------------
					%nprocshared=12
					%mem=30GB
					# opt freq b3lyp/6-311++g(d,p) geom=connectivity

					Title Card Required

					0 1
					 C                 -2.46019102    0.66878980    0.00000000
					 H                 -3.53019102    0.66878980    0.00000000
					 C                 -1.78491671    1.84376710    0.00000000
					 H                 -2.31808046    2.77147202    0.00000000
					 C                 -0.24491671    1.84376710    0.00000000
					 H                  0.11174964    1.33936561    0.87365225
					 H                  0.11175014    1.33936277   -0.87365040
					 C                  0.26841616    3.29569318   -0.00000272
					 H                 -0.08809134    3.80003760   -0.87375274
					 H                 -0.08841013    3.80015413    0.87354988
					 H                  1.33841614    3.29569319    0.00019285
					 C                 -1.69283385   -0.66641167    0.00000000
					 H                 -1.07632036   -0.72346683    0.87267166
					 H                 -2.38975980   -1.47831708    0.00195600
					 H                 -1.07925784   -0.72515562   -0.87462771


				-----------------------------------------------------------------
 
				
				直接输入一段文本为：counterA.readGjfGeom()，输入变量为分子几何结构gjfGeom，要求解的分子名moleculeLabel，方便用户，可缺省。
				分子几何结果如下例
				-----------------------------------------------------------------
					 C                 -2.46019102    0.66878980    0.00000000
					 H                 -3.53019102    0.66878980    0.00000000
					 C                 -1.78491671    1.84376710    0.00000000
					 H                 -2.31808046    2.77147202    0.00000000
					 C                 -0.24491671    1.84376710    0.00000000
					 H                  0.11174964    1.33936561    0.87365225
					 H                  0.11175014    1.33936277   -0.87365040
					 C                  0.26841616    3.29569318   -0.00000272
					 H                 -0.08809134    3.80003760   -0.87375274
					 H                 -0.08841013    3.80015413    0.87354988
					 H                  1.33841614    3.29569319    0.00019285
					 C                 -1.69283385   -0.66641167    0.00000000
					 H                 -1.07632036   -0.72346683    0.87267166
					 H                 -2.38975980   -1.47831708    0.00195600
					 H                 -1.07925784   -0.72515562   -0.87462771
				-----------------------------------------------------------------
	
		3. 读取模板文件，获取group library。
				counterA.readGroupTemplate()，输入变量为模板文件名fileName，可缺省，默认为同目录下文件groupTemplate.xlsx。
		4. 生成DBGC向量，写入excel文件。
				counterA.writeDBGCVector()，输入变量为生成excel文件名，默认为DBGCVectors.xlsx，放在DBGCVectors文件夹中。overwrite=True/False可以控制是重新生成还是接着之前的数据写入。
	
	Matlab
		前面python code生成的DBGCVectors.xlsx即为此Matlab程序的输入文件。运行DBGCUseTrainedANN.m得到的predicted_test_Y变量即为最后的求解结果，DBGCVectors.xlsx中有多少分子，predicted_test_Y长度就有多长。
		在Matlab code中首先读取了DBGCVectors.xlsx，这里的调用速度很慢，由于数据很少，所以我觉得很不应该，可能读取excel的函数的调用方式有问题，你能不能帮我优化一下这里？
		在Matlab code中还读取了savedNet中的parameterizedAlgorithm.mat，即已经训练好的网络。如果分子很多，其实可以是读取一次就够了，目前还没有分开，若有需要也可以优化。
		
